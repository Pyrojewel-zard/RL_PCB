# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _board
else:
    import _board

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class board(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _board.board_swiginit(self, _board.new_board())

    def get_bb_min_x(self):
        return _board.board_get_bb_min_x(self)

    def get_bb_min_y(self):
        return _board.board_get_bb_min_y(self)

    def get_bb_max_x(self):
        return _board.board_get_bb_max_x(self)

    def get_bb_max_y(self):
        return _board.board_get_bb_max_y(self)

    def set_bb_min_x(self, val):
        return _board.board_set_bb_min_x(self, val)

    def set_bb_min_y(self, val):
        return _board.board_set_bb_min_y(self, val)

    def set_bb_max_x(self, val):
        return _board.board_set_bb_max_x(self, val)

    def set_bb_max_y(self, val):
        return _board.board_set_bb_max_y(self, val)

    def get_board_size(self, board_size):
        return _board.board_get_board_size(self, board_size)

    def process_line(self, line):
        return _board.board_process_line(self, line)

    def write_to_file(self, filename):
        return _board.board_write_to_file(self, filename)

    def _print(self):
        return _board.board__print(self)

    def get_width(self):
        return _board.board_get_width(self)

    def get_height(self):
        return _board.board_get_height(self)
    __swig_destroy__ = _board.delete_board

# Register board in _board:
_board.board_swigregister(board)


def process_board_file(board_file, b):
    return _board.process_board_file(board_file, b)

def get_fields(s, v):
    return _board.get_fields(s, v)


