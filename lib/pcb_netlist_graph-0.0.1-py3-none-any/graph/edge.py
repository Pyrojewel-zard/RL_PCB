# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _edge
else:
    import _edge

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _edge.delete_SwigPyIterator

    def value(self):
        return _edge.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _edge.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _edge.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _edge.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _edge.SwigPyIterator_equal(self, x)

    def copy(self):
        return _edge.SwigPyIterator_copy(self)

    def next(self):
        return _edge.SwigPyIterator_next(self)

    def __next__(self):
        return _edge.SwigPyIterator___next__(self)

    def previous(self):
        return _edge.SwigPyIterator_previous(self)

    def advance(self, n):
        return _edge.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _edge.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _edge.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _edge.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _edge.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _edge.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _edge.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _edge:
_edge.SwigPyIterator_swigregister(SwigPyIterator)

class e_vec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _edge.e_vec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _edge.e_vec___nonzero__(self)

    def __bool__(self):
        return _edge.e_vec___bool__(self)

    def __len__(self):
        return _edge.e_vec___len__(self)

    def __getslice__(self, i, j):
        return _edge.e_vec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _edge.e_vec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _edge.e_vec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _edge.e_vec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _edge.e_vec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _edge.e_vec___setitem__(self, *args)

    def pop(self):
        return _edge.e_vec_pop(self)

    def append(self, x):
        return _edge.e_vec_append(self, x)

    def empty(self):
        return _edge.e_vec_empty(self)

    def size(self):
        return _edge.e_vec_size(self)

    def swap(self, v):
        return _edge.e_vec_swap(self, v)

    def begin(self):
        return _edge.e_vec_begin(self)

    def end(self):
        return _edge.e_vec_end(self)

    def rbegin(self):
        return _edge.e_vec_rbegin(self)

    def rend(self):
        return _edge.e_vec_rend(self)

    def clear(self):
        return _edge.e_vec_clear(self)

    def get_allocator(self):
        return _edge.e_vec_get_allocator(self)

    def pop_back(self):
        return _edge.e_vec_pop_back(self)

    def erase(self, *args):
        return _edge.e_vec_erase(self, *args)

    def __init__(self, *args):
        _edge.e_vec_swiginit(self, _edge.new_e_vec(*args))

    def push_back(self, x):
        return _edge.e_vec_push_back(self, x)

    def front(self):
        return _edge.e_vec_front(self)

    def back(self):
        return _edge.e_vec_back(self)

    def assign(self, n, x):
        return _edge.e_vec_assign(self, n, x)

    def resize(self, *args):
        return _edge.e_vec_resize(self, *args)

    def insert(self, *args):
        return _edge.e_vec_insert(self, *args)

    def reserve(self, n):
        return _edge.e_vec_reserve(self, n)

    def capacity(self):
        return _edge.e_vec_capacity(self)
    __swig_destroy__ = _edge.delete_e_vec

# Register e_vec in _edge:
_edge.e_vec_swigregister(e_vec)

class edge(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _edge.edge_swiginit(self, _edge.new_edge())

    def create_from_string_short(self, s):
        return _edge.edge_create_from_string_short(self, s)

    def create_from_string_long(self, s):
        return _edge.edge_create_from_string_long(self, s)

    def get_net_id(self):
        return _edge.edge_get_net_id(self)

    def get_net_name(self):
        return _edge.edge_get_net_name(self)

    def get_power_rail(self):
        return _edge.edge_get_power_rail(self)

    def get_instance_id(self, node):
        return _edge.edge_get_instance_id(self, node)

    def get_instance_isPlaced(self, node):
        return _edge.edge_get_instance_isPlaced(self, node)

    def get_pad_name(self, node):
        return _edge.edge_get_pad_name(self, node)

    def get_pad_id(self, node):
        return _edge.edge_get_pad_id(self, node)

    def get_edge_connectivity(self):
        return _edge.edge_get_edge_connectivity(self)

    def get_size(self, id):
        return _edge.edge_get_size(self, id)

    def set_size(self, id, p):
        return _edge.edge_set_size(self, id, p)

    def get_pos(self, id):
        return _edge.edge_get_pos(self, id)

    def set_pos(self, id, p):
        return _edge.edge_set_pos(self, id, p)

    def print_to_console(self, format):
        return _edge.edge_print_to_console(self, format)

    def _print(self, print_csv):
        return _edge.edge__print(self, print_csv)

    def set_id(self, node, id):
        return _edge.edge_set_id(self, node, id)

    def set_name(self, node, name):
        return _edge.edge_set_name(self, node, name)

    def set_pad_id(self, node, pid):
        return _edge.edge_set_pad_id(self, node, pid)

    def set_pad_name(self, node, pname):
        return _edge.edge_set_pad_name(self, node, pname)

    def set_isPlaced(self, node, isPlaced):
        return _edge.edge_set_isPlaced(self, node, isPlaced)

    def set_net_id(self, net_id):
        return _edge.edge_set_net_id(self, net_id)

    def set_net_name(self, net_name):
        return _edge.edge_set_net_name(self, net_name)

    def set_power_rail(self, power_rail):
        return _edge.edge_set_power_rail(self, power_rail)

    def format_string_long(self, line):
        return _edge.edge_format_string_long(self, line)
    __swig_destroy__ = _edge.delete_edge

# Register edge in _edge:
_edge.edge_swigregister(edge)



