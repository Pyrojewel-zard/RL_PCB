# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _graph
else:
    import _graph

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _graph.delete_SwigPyIterator

    def value(self):
        return _graph.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _graph.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _graph.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _graph.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _graph.SwigPyIterator_equal(self, x)

    def copy(self):
        return _graph.SwigPyIterator_copy(self)

    def next(self):
        return _graph.SwigPyIterator_next(self)

    def __next__(self):
        return _graph.SwigPyIterator___next__(self)

    def previous(self):
        return _graph.SwigPyIterator_previous(self)

    def advance(self, n):
        return _graph.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _graph.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _graph.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _graph.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _graph.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _graph.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _graph.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _graph:
_graph.SwigPyIterator_swigregister(SwigPyIterator)

class n_vec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _graph.n_vec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _graph.n_vec___nonzero__(self)

    def __bool__(self):
        return _graph.n_vec___bool__(self)

    def __len__(self):
        return _graph.n_vec___len__(self)

    def __getslice__(self, i, j):
        return _graph.n_vec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _graph.n_vec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _graph.n_vec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _graph.n_vec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _graph.n_vec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _graph.n_vec___setitem__(self, *args)

    def pop(self):
        return _graph.n_vec_pop(self)

    def append(self, x):
        return _graph.n_vec_append(self, x)

    def empty(self):
        return _graph.n_vec_empty(self)

    def size(self):
        return _graph.n_vec_size(self)

    def swap(self, v):
        return _graph.n_vec_swap(self, v)

    def begin(self):
        return _graph.n_vec_begin(self)

    def end(self):
        return _graph.n_vec_end(self)

    def rbegin(self):
        return _graph.n_vec_rbegin(self)

    def rend(self):
        return _graph.n_vec_rend(self)

    def clear(self):
        return _graph.n_vec_clear(self)

    def get_allocator(self):
        return _graph.n_vec_get_allocator(self)

    def pop_back(self):
        return _graph.n_vec_pop_back(self)

    def erase(self, *args):
        return _graph.n_vec_erase(self, *args)

    def __init__(self, *args):
        _graph.n_vec_swiginit(self, _graph.new_n_vec(*args))

    def push_back(self, x):
        return _graph.n_vec_push_back(self, x)

    def front(self):
        return _graph.n_vec_front(self)

    def back(self):
        return _graph.n_vec_back(self)

    def assign(self, n, x):
        return _graph.n_vec_assign(self, n, x)

    def resize(self, *args):
        return _graph.n_vec_resize(self, *args)

    def insert(self, *args):
        return _graph.n_vec_insert(self, *args)

    def reserve(self, n):
        return _graph.n_vec_reserve(self, n)

    def capacity(self):
        return _graph.n_vec_capacity(self)
    __swig_destroy__ = _graph.delete_n_vec

# Register n_vec in _graph:
_graph.n_vec_swigregister(n_vec)

class e_vec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _graph.e_vec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _graph.e_vec___nonzero__(self)

    def __bool__(self):
        return _graph.e_vec___bool__(self)

    def __len__(self):
        return _graph.e_vec___len__(self)

    def __getslice__(self, i, j):
        return _graph.e_vec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _graph.e_vec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _graph.e_vec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _graph.e_vec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _graph.e_vec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _graph.e_vec___setitem__(self, *args)

    def pop(self):
        return _graph.e_vec_pop(self)

    def append(self, x):
        return _graph.e_vec_append(self, x)

    def empty(self):
        return _graph.e_vec_empty(self)

    def size(self):
        return _graph.e_vec_size(self)

    def swap(self, v):
        return _graph.e_vec_swap(self, v)

    def begin(self):
        return _graph.e_vec_begin(self)

    def end(self):
        return _graph.e_vec_end(self)

    def rbegin(self):
        return _graph.e_vec_rbegin(self)

    def rend(self):
        return _graph.e_vec_rend(self)

    def clear(self):
        return _graph.e_vec_clear(self)

    def get_allocator(self):
        return _graph.e_vec_get_allocator(self)

    def pop_back(self):
        return _graph.e_vec_pop_back(self)

    def erase(self, *args):
        return _graph.e_vec_erase(self, *args)

    def __init__(self, *args):
        _graph.e_vec_swiginit(self, _graph.new_e_vec(*args))

    def push_back(self, x):
        return _graph.e_vec_push_back(self, x)

    def front(self):
        return _graph.e_vec_front(self)

    def back(self):
        return _graph.e_vec_back(self)

    def assign(self, n, x):
        return _graph.e_vec_assign(self, n, x)

    def resize(self, *args):
        return _graph.e_vec_resize(self, *args)

    def insert(self, *args):
        return _graph.e_vec_insert(self, *args)

    def reserve(self, n):
        return _graph.e_vec_reserve(self, n)

    def capacity(self):
        return _graph.e_vec_capacity(self)
    __swig_destroy__ = _graph.delete_e_vec

# Register e_vec in _graph:
_graph.e_vec_swigregister(e_vec)

class set_i(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _graph.set_i_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _graph.set_i___nonzero__(self)

    def __bool__(self):
        return _graph.set_i___bool__(self)

    def __len__(self):
        return _graph.set_i___len__(self)

    def append(self, x):
        return _graph.set_i_append(self, x)

    def __contains__(self, x):
        return _graph.set_i___contains__(self, x)

    def __getitem__(self, i):
        return _graph.set_i___getitem__(self, i)

    def add(self, x):
        return _graph.set_i_add(self, x)

    def discard(self, x):
        return _graph.set_i_discard(self, x)

    def __init__(self, *args):
        _graph.set_i_swiginit(self, _graph.new_set_i(*args))

    def empty(self):
        return _graph.set_i_empty(self)

    def size(self):
        return _graph.set_i_size(self)

    def clear(self):
        return _graph.set_i_clear(self)

    def swap(self, v):
        return _graph.set_i_swap(self, v)

    def count(self, x):
        return _graph.set_i_count(self, x)

    def begin(self):
        return _graph.set_i_begin(self)

    def end(self):
        return _graph.set_i_end(self)

    def rbegin(self):
        return _graph.set_i_rbegin(self)

    def rend(self):
        return _graph.set_i_rend(self)

    def erase(self, *args):
        return _graph.set_i_erase(self, *args)

    def find(self, x):
        return _graph.set_i_find(self, x)

    def lower_bound(self, x):
        return _graph.set_i_lower_bound(self, x)

    def upper_bound(self, x):
        return _graph.set_i_upper_bound(self, x)

    def equal_range(self, x):
        return _graph.set_i_equal_range(self, x)

    def insert(self, __x):
        return _graph.set_i_insert(self, __x)
    __swig_destroy__ = _graph.delete_set_i

# Register set_i in _graph:
_graph.set_i_swigregister(set_i)

COMPONENT = _graph.COMPONENT
PADD = _graph.PADD
SHORT = _graph.SHORT
LONG = _graph.LONG
class graph(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _graph.graph_swiginit(self, _graph.new_graph(*args))

    def set_graph_name(self, graph_name):
        return _graph.graph_set_graph_name(self, graph_name)

    def set_kicad_pcb_file(self, kicad_pcb_file):
        return _graph.graph_set_kicad_pcb_file(self, kicad_pcb_file)

    def get_kicad_pcb_file(self):
        return _graph.graph_get_kicad_pcb_file(self)

    def add_node_from_string_short(self, s):
        return _graph.graph_add_node_from_string_short(self, s)

    def add_node_from_string_long(self, s):
        return _graph.graph_add_node_from_string_long(self, s)

    def add_edge_from_string_short(self, s):
        return _graph.graph_add_edge_from_string_short(self, s)

    def add_edge_from_string_long(self, s):
        return _graph.graph_add_edge_from_string_long(self, s)

    def get_node_name_by_id(self, id):
        return _graph.graph_get_node_name_by_id(self, id)

    def get_set_net_ids(self):
        return _graph.graph_get_set_net_ids(self)

    def statistics(self):
        return _graph.graph_statistics(self)

    def get_nodes_connectivity_list(self, power_rail):
        return _graph.graph_get_nodes_connectivity_list(self, power_rail)

    def get_nodes_area_list(self):
        return _graph.graph_get_nodes_area_list(self)

    def get_neighbor_nodes_connectivity_list(self, id, power_rail):
        return _graph.graph_get_neighbor_nodes_connectivity_list(self, id, power_rail)

    def node_statistics(self):
        return _graph.graph_node_statistics(self)

    def embed_neighbour_nodes(self):
        return _graph.graph_embed_neighbour_nodes(self)

    def get_neighbor_node_ids(self, id, power_rail=0, ignore_self_loops=True):
        return _graph.graph_get_neighbor_node_ids(self, id, power_rail, ignore_self_loops)

    def get_number_of_nodes(self):
        return _graph.graph_get_number_of_nodes(self)

    def get_number_of_edges(self):
        return _graph.graph_get_number_of_edges(self)

    def get_average_pad_position(self, id, pads_avg_pos):
        return _graph.graph_get_average_pad_position(self, id, pads_avg_pos)

    def get_node_by_id(self, *args):
        return _graph.graph_get_node_by_id(self, *args)

    def get_edges_by_power_rail(self, power_rail, type):
        return _graph.graph_get_edges_by_power_rail(self, power_rail, type)

    def get_edges_by_net_id(self, net_id, type):
        return _graph.graph_get_edges_by_net_id(self, net_id, type)

    def get_edges_by_instance_id(self, i_id, power_rail):
        return _graph.graph_get_edges_by_instance_id(self, i_id, power_rail)

    def get_all_edges_by_instance_id(self, i_id, power_rail):
        return _graph.graph_get_all_edges_by_instance_id(self, i_id, power_rail)

    def partial_graph(self, fileName, power_rail, unique):
        return _graph.graph_partial_graph(self, fileName, power_rail, unique)

    def net_graphviz(self, fileName, net_id, type):
        return _graph.graph_net_graphviz(self, fileName, net_id, type)

    def instance_graphviz(self, fileName, i_id, power_rail):
        return _graph.graph_instance_graphviz(self, fileName, i_id, power_rail)

    def instance_pads_graphviz(self, fileName, i_id, power_rail):
        return _graph.graph_instance_pads_graphviz(self, fileName, i_id, power_rail)

    def partial_graph_gml(self, fileName, power_rail, unique):
        return _graph.graph_partial_graph_gml(self, fileName, power_rail, unique)

    def normalize(self):
        return _graph.graph_normalize(self)

    def get_feature_vector(self, id, fv, MAX_NEIGHBORS=0):
        return _graph.graph_get_feature_vector(self, id, fv, MAX_NEIGHBORS)

    def get_simplified_feature_vector(self, id, fv, MAX_NEIGHBORS=0):
        return _graph.graph_get_simplified_feature_vector(self, id, fv, MAX_NEIGHBORS)

    def print_feature_vector(self, fv):
        return _graph.graph_print_feature_vector(self, fv)

    def print_simplified_feature_vector(self, fv):
        return _graph.graph_print_simplified_feature_vector(self, fv)

    def normalize_feature_vector(self, fv, grd_x, grd_y):
        return _graph.graph_normalize_feature_vector(self, fv, grd_x, grd_y)

    def normalize_simplified_feature_vector(self, fv, grd_x, grd_y):
        return _graph.graph_normalize_simplified_feature_vector(self, fv, grd_x, grd_y)

    def get_dimensions_of_largest_component(self, x, y):
        return _graph.graph_get_dimensions_of_largest_component(self, x, y)

    def get_largest_x_size(self):
        return _graph.graph_get_largest_x_size(self)

    def get_largest_y_size(self):
        return _graph.graph_get_largest_y_size(self)

    def get_largest_pin_count(self, *args):
        return _graph.graph_get_largest_pin_count(self, *args)

    def get_next_component_id_to_place(self, ordering):
        return _graph.graph_get_next_component_id_to_place(self, ordering)

    def update(self, id, pos):
        return _graph.graph_update(self, id, pos)

    def reset(self):
        return _graph.graph_reset(self)

    def isDone(self):
        return _graph.graph_isDone(self)

    def _V_set(self):
        return _graph.graph__V_set(self)

    def set_component_origin_to_zero(self, b):
        return _graph.graph_set_component_origin_to_zero(self, b)

    def reset_component_origin(self, b):
        return _graph.graph_reset_component_origin(self, b)

    def set_original_component_origin(self, b):
        return _graph.graph_set_original_component_origin(self, b)

    def get_nets_associated_with_instance(self, id, nets, power_rail):
        return _graph.graph_get_nets_associated_with_instance(self, id, nets, power_rail)

    def get_edges_with_net_and_inst_ids(self, inst_id_a, inst_id_b, net_id, preserve_order, edges):
        return _graph.graph_get_edges_with_net_and_inst_ids(self, inst_id_a, inst_id_b, net_id, preserve_order, edges)

    def calc_hpwl_of_inst(self, id):
        return _graph.graph_calc_hpwl_of_inst(self, id)

    def place_set_centroid(self, id, cx, cy):
        return _graph.graph_place_set_centroid(self, id, cx, cy)

    def place_set_orientation(self, id, orientation):
        return _graph.graph_place_set_orientation(self, id, orientation)

    def place_swap_size(self, id):
        return _graph.graph_place_swap_size(self, id)

    def place_confirm(self, id):
        return _graph.graph_place_confirm(self, id)

    def calc_full_hpwl(self):
        return _graph.graph_calc_full_hpwl(self)

    def calc_hpwl(self, *args):
        return _graph.graph_calc_hpwl(self, *args)

    def get_net_id_from_name(self, net_name):
        return _graph.graph_get_net_id_from_name(self, net_name)

    def get_all_nets(self, nets, power_rail):
        return _graph.graph_get_all_nets(self, nets, power_rail)

    def get_net_name(self, net_id, net_name):
        return _graph.graph_get_net_name(self, net_id, net_name)

    def calc_hpwl_of_net(self, net_id, do_not_ignore_unplaced=False):
        return _graph.graph_calc_hpwl_of_net(self, net_id, do_not_ignore_unplaced)

    def zero_unplaced_inst_pos(self):
        return _graph.graph_zero_unplaced_inst_pos(self)

    def _print(self, print_csv):
        return _graph.graph__print(self, print_csv)

    def write_nodes_to_file(self, filename, format):
        return _graph.graph_write_nodes_to_file(self, filename, format)

    def write_edges_to_file(self, filename, format):
        return _graph.graph_write_edges_to_file(self, filename, format)

    def write_optimals_to_file(self, filename):
        return _graph.graph_write_optimals_to_file(self, filename)

    def update_original_nodes_with_current_optimals(self):
        return _graph.graph_update_original_nodes_with_current_optimals(self)

    def update_node_optimal(self, line):
        return _graph.graph_update_node_optimal(self, line)

    def get_nodes(self):
        return _graph.graph_get_nodes(self)

    def get_original_nodes(self):
        return _graph.graph_get_original_nodes(self)

    def get_edges(self):
        return _graph.graph_get_edges(self)

    def set_hpwl(self, hpwl):
        return _graph.graph_set_hpwl(self, hpwl)

    def get_hpwl(self):
        return _graph.graph_get_hpwl(self)

    def update_hpwl(self, do_not_ignore_unplaced=False):
        return _graph.graph_update_hpwl(self, do_not_ignore_unplaced)

    def components_placed(self):
        return _graph.graph_components_placed(self)

    def components_to_place(self):
        return _graph.graph_components_to_place(self)

    def graph_placement_completion(self):
        return _graph.graph_graph_placement_completion(self)

    def print_graph_placement_status(self):
        return _graph.graph_print_graph_placement_status(self)

    def find_unplaced_node(self):
        return _graph.graph_find_unplaced_node(self)

    def remove_node(self, id):
        return _graph.graph_remove_node(self, id)

    def find_edge_connecting_to_node(self, id):
        return _graph.graph_find_edge_connecting_to_node(self, id)

    def remove_edge(self, net_id):
        return _graph.graph_remove_edge(self, net_id)

    def remove_edges_associated_with_node(self, id):
        return _graph.graph_remove_edges_associated_with_node(self, id)

    def remove_unplaced_nodes_and_associated_edges(self):
        return _graph.graph_remove_unplaced_nodes_and_associated_edges(self)

    def reorder(self):
        return _graph.graph_reorder(self)

    def print_node_area_pairs(self):
        return _graph.graph_print_node_area_pairs(self)

    def components_in_net(self, net_name):
        return _graph.graph_components_in_net(self, net_name)
    __swig_destroy__ = _graph.delete_graph

# Register graph in _graph:
_graph.graph_swigregister(graph)


def process_nodes_file(nodes_file, file_format, g):
    return _graph.process_nodes_file(nodes_file, file_format, g)

def process_edges_file(edges_file, file_format, g):
    return _graph.process_edges_file(edges_file, file_format, g)

def tally_contents(vec):
    return _graph.tally_contents(vec)

def sortbysec(a, b):
    return _graph.sortbysec(a, b)

def get_build_time(s):
    return _graph.get_build_time(s)

def get_cpp_standard(s):
    return _graph.get_cpp_standard(s)

def build_info():
    return _graph.build_info()

def build_info_as_string():
    return _graph.build_info_as_string()

def get_library_version(*args):
    return _graph.get_library_version(*args)

cvar = _graph.cvar
VERSION_MAJOR = cvar.VERSION_MAJOR
VERSION_MINOR = cvar.VERSION_MINOR
PATCH_NUMBER = cvar.PATCH_NUMBER

