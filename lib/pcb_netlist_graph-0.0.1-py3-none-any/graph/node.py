# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _node
else:
    import _node

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _node.delete_SwigPyIterator

    def value(self):
        return _node.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _node.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _node.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _node.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _node.SwigPyIterator_equal(self, x)

    def copy(self):
        return _node.SwigPyIterator_copy(self)

    def next(self):
        return _node.SwigPyIterator_next(self)

    def __next__(self):
        return _node.SwigPyIterator___next__(self)

    def previous(self):
        return _node.SwigPyIterator_previous(self)

    def advance(self, n):
        return _node.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _node.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _node.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _node.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _node.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _node.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _node.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _node:
_node.SwigPyIterator_swigregister(SwigPyIterator)

class n_vec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _node.n_vec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _node.n_vec___nonzero__(self)

    def __bool__(self):
        return _node.n_vec___bool__(self)

    def __len__(self):
        return _node.n_vec___len__(self)

    def __getslice__(self, i, j):
        return _node.n_vec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _node.n_vec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _node.n_vec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _node.n_vec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _node.n_vec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _node.n_vec___setitem__(self, *args)

    def pop(self):
        return _node.n_vec_pop(self)

    def append(self, x):
        return _node.n_vec_append(self, x)

    def empty(self):
        return _node.n_vec_empty(self)

    def size(self):
        return _node.n_vec_size(self)

    def swap(self, v):
        return _node.n_vec_swap(self, v)

    def begin(self):
        return _node.n_vec_begin(self)

    def end(self):
        return _node.n_vec_end(self)

    def rbegin(self):
        return _node.n_vec_rbegin(self)

    def rend(self):
        return _node.n_vec_rend(self)

    def clear(self):
        return _node.n_vec_clear(self)

    def get_allocator(self):
        return _node.n_vec_get_allocator(self)

    def pop_back(self):
        return _node.n_vec_pop_back(self)

    def erase(self, *args):
        return _node.n_vec_erase(self, *args)

    def __init__(self, *args):
        _node.n_vec_swiginit(self, _node.new_n_vec(*args))

    def push_back(self, x):
        return _node.n_vec_push_back(self, x)

    def front(self):
        return _node.n_vec_front(self)

    def back(self):
        return _node.n_vec_back(self)

    def assign(self, n, x):
        return _node.n_vec_assign(self, n, x)

    def resize(self, *args):
        return _node.n_vec_resize(self, *args)

    def insert(self, *args):
        return _node.n_vec_insert(self, *args)

    def reserve(self, n):
        return _node.n_vec_reserve(self, n)

    def capacity(self):
        return _node.n_vec_capacity(self)
    __swig_destroy__ = _node.delete_n_vec

# Register n_vec in _node:
_node.n_vec_swigregister(n_vec)

class db_pair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _node.db_pair_swiginit(self, _node.new_db_pair(*args))
    first = property(_node.db_pair_first_get, _node.db_pair_first_set)
    second = property(_node.db_pair_second_get, _node.db_pair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _node.delete_db_pair

# Register db_pair in _node:
_node.db_pair_swigregister(db_pair)

class node(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _node.node_swiginit(self, _node.new_node())

    def create_from_string_short(self, s):
        return _node.node_create_from_string_short(self, s)

    def create_from_string_long(self, s):
        return _node.node_create_from_string_long(self, s)

    def get_id(self):
        return _node.node_get_id(self)

    def get_name(self):
        return _node.node_get_name(self)

    def get_size(self):
        return _node.node_get_size(self)

    def set_size(self, size):
        return _node.node_set_size(self, size)

    def get_pos(self):
        return _node.node_get_pos(self)

    def get_layer(self):
        return _node.node_get_layer(self)

    def get_type(self):
        return _node.node_get_type(self)

    def get_pin_count(self):
        return _node.node_get_pin_count(self)

    def get_smd_pin_count(self):
        return _node.node_get_smd_pin_count(self)

    def get_th_pin_count(self):
        return _node.node_get_th_pin_count(self)

    def get_isPlaced(self):
        return _node.node_get_isPlaced(self)

    def unset_isPlaced(self):
        return _node.node_unset_isPlaced(self)

    def set_pos(self, p):
        return _node.node_set_pos(self, p)

    def set_orientation(self, orient):
        return _node.node_set_orientation(self, orient)

    def get_orientation(self):
        return _node.node_get_orientation(self)

    def set_neighbors(self, n):
        return _node.node_set_neighbors(self, n)

    def get_neighbors(self, n):
        return _node.node_get_neighbors(self, n)

    def get_inst_bb_coords(self, xmin, xmax, ymin, ymax, grid_resolution):
        return _node.node_get_inst_bb_coords(self, xmin, xmax, ymin, ymax, grid_resolution)

    def get_inst_bb_centre_size(self, xc, yc, x, y, grid_resolution):
        return _node.node_get_inst_bb_centre_size(self, xc, yc, x, y, grid_resolution)

    def print_to_console(self, format):
        return _node.node_print_to_console(self, format)

    def _print(self, print_csv):
        return _node.node__print(self, print_csv)

    def set_id(self, id):
        return _node.node_set_id(self, id)

    def set_name(self, name):
        return _node.node_set_name(self, name)

    def set_layer(self, layer):
        return _node.node_set_layer(self, layer)

    def set_isPlaced(self, *args):
        return _node.node_set_isPlaced(self, *args)

    def set_pins(self, pins):
        return _node.node_set_pins(self, pins)

    def set_pins_smd(self, pins_smd):
        return _node.node_set_pins_smd(self, pins_smd)

    def set_pins_th(self, pins_th):
        return _node.node_set_pins_th(self, pins_th)

    def set_type(self, type):
        return _node.node_set_type(self, type)

    def format_string_long(self, line):
        return _node.node_format_string_long(self, line)

    def get_area(self):
        return _node.node_get_area(self)

    def set_opt_id(self, id):
        return _node.node_set_opt_id(self, id)

    def set_opt_name(self, name):
        return _node.node_set_opt_name(self, name)

    def set_opt_euclidean_distance(self, euclidean_distance):
        return _node.node_set_opt_euclidean_distance(self, euclidean_distance)

    def set_opt_hpwl(self, hpwl):
        return _node.node_set_opt_hpwl(self, hpwl)

    def get_opt_id(self):
        return _node.node_get_opt_id(self)

    def get_opt_name(self):
        return _node.node_get_opt_name(self)

    def get_opt_euclidean_distance(self):
        return _node.node_get_opt_euclidean_distance(self)

    def get_opt_hpwl(self):
        return _node.node_get_opt_hpwl(self)

    def get_opt_formatted_string(self, s):
        return _node.node_get_opt_formatted_string(self, s)
    __swig_destroy__ = _node.delete_node

# Register node in _node:
_node.node_swigregister(node)



